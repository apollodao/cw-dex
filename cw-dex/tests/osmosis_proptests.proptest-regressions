# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 8ad6024310b601c568285a2cc35a35fa6e170da6a67cd344adfeea3605d93265 # shrinks to (pool, added_liquidity) = (OsmosisTestPool { assets: [Native("denom0"), Native("denom1"), Native("denom2"), Native("denom3"), Native("denom4")], pool_liquidity: [14849857358886770723, 6929924224632456654, 11042848898156722336, 11743252745312854907, 12844547611706776996], pool_type: Basic }, [1241, 11798042441453439779])
cc 5f2e2c66c269e7e903e42b25b14245936d62e5d4f72a134f999d2f4b41f286a9 # shrinks to (pool, added_liquidity) = (OsmosisTestPool { assets: [Native("denom0"), Native("denom1"), Native("denom2"), Native("denom3")], pool_liquidity: [13404504703740343156, 14614600668840454824, 12032633473655657727, 13593904774692379966], pool_type: Balancer { pool_weights: [153103, 142231, 787419, 888564] } }, [13529290035338261093])
cc 98e52a60b006d3848cdc287f4699791924cd1da6316e61e0b113e966c8abcb3f # shrinks to (pool, added_liquidity) = (OsmosisTestPool { liquidity: [Coin { denom: "denom0", amount: Uint128(326974120403145535505785688202939) }, Coin { denom: "denom1", amount: Uint128(1202769811771236889353767294617309) }, Coin { denom: "denom2", amount: Uint128(852779564627639871432404626569585) }, Coin { denom: "denom3", amount: Uint128(199776237578256428613020432524571) }, Coin { denom: "denom4", amount: Uint128(1238214461120662627738841026786442) }, Coin { denom: "denom5", amount: Uint128(755317455374194730443133535479512) }], pool_type: StableSwap { scaling_factors: [6457756154959345428, 9039356561302986606, 2277370791335139746, 4600023398842100560, 905418547459958100, 8900545450753252222] } }, [1])
